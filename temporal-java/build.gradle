plugins {
    id 'application'
    id 'java'
}

sourceSets {
    main {
        java {
            srcDirs = ['core/src/java']
        }
        resources {
            srcDirs = ['core/src/resources']
        }
    }
}

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

ext {
    javaSDKVersion = '1.26.1'
}

dependencies {
    implementation 'io.javalin:javalin:5.6.5'
    implementation "io.temporal:temporal-sdk:$javaSDKVersion"
    implementation 'ch.qos.logback:logback-classic:1.5.7'

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    testImplementation "io.temporal:temporal-testing:$javaSDKVersion"
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.mockito:mockito-core:5.3.1"
    testImplementation(platform("org.junit:junit-bom:5.9.3"))
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
}

test {
    useJUnitPlatform()
}

application {
    mainClass = 'io.temporal.latencyoptimization.EarlyReturnWorker'
}

// Original execute task
task execute(type: JavaExec) {
    mainClass = findProperty("mainClass") ?: application.mainClass
    classpath = sourceSets.main.runtimeClasspath
    args project.hasProperty("arg") ? project.getProperty("arg") : ""
}

// New task for running the API
task api(type: JavaExec) {
    description = 'Runs the API server'
    group = 'application'
    mainClass = 'io.temporal.latencyoptimization.api.CallerAPI'
    classpath = sourceSets.main.runtimeClasspath
}